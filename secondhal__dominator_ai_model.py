# -*- coding: utf-8 -*-
"""SecondHal _Dominator_AI_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmDRcJzGBa5tOrswiIXtzxLMnRJ43v0h

**Import libraries**
"""

#Import required libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score, accuracy_score
!pip install ipywidgets
import ipywidgets as widgets
from IPython.display import display, clear_output

"""**Load dataset**"""

file_path = '/content/Football.csv'
data = pd.read_csv(file_path)

"""**Explore the dataset**"""

print("Dataset shape (rows, columns):", data.shape)

print("First 5 rows:")
display(data.head())

print("Missing values per column:")
print(data.isnull().sum())

"""**Select features**"""

# We'll use 10 features from the first half of the match

columns_needed = [
    'Shots_on_Goal_Home', 'Shots_on_Goal_Host',
    'Ball_Possession_Home', 'Ball_Possession_Host',
    'Fouls_Home', 'Fouls_Host',
    'Corner_Kicks_Home', 'Corner_Kicks_Host',
    'home_score', 'away_score'
]

# Create a new DataFrame with selected features

df_model = data[columns_needed].copy()

"""**Preprocessing**"""

# Convert possession values like "58%" to numeric
def convert_percentage(val):
    if isinstance(val, str) and '%' in val:
        return float(val.replace('%', '').strip())
    try:
        return float(val)
    except:
        return np.nan

df_model['Ball_Possession_Home'] = df_model['Ball_Possession_Home'].apply(convert_percentage)
df_model['Ball_Possession_Host'] = df_model['Ball_Possession_Host'].apply(convert_percentage)
df_model['home_score'] = pd.to_numeric(df_model['home_score'], errors='coerce')
df_model['away_score'] = pd.to_numeric(df_model['away_score'], errors='coerce')
df_model.dropna(inplace=True)

"""**Create target column**"""

# Generate 'SecondHalfControl' label
def determine_control_advanced(row):
    home_points = 0
    away_points = 0
    if row['Shots_on_Goal_Home'] > row['Shots_on_Goal_Host']:
        home_points += 1
    elif row['Shots_on_Goal_Host'] > row['Shots_on_Goal_Home']:
        away_points += 1
    if row['Ball_Possession_Home'] > row['Ball_Possession_Host']:
        home_points += 1
    elif row['Ball_Possession_Host'] > row['Ball_Possession_Home']:
        away_points += 1
    if row['Corner_Kicks_Home'] > row['Corner_Kicks_Host']:
        home_points += 1
    elif row['Corner_Kicks_Host'] > row['Corner_Kicks_Home']:
        away_points += 1
    return 1 if home_points > away_points else 0

df_model['SecondHalfControl'] = df_model.apply(determine_control_advanced, axis=1)

"""**Prepare for training**"""

X = df_model[columns_needed]
y = df_model['SecondHalfControl']

# split the data 80% training , 2-% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Visualize data distributions**"""

# Shots
plt.figure(figsize=(10, 5))
sns.histplot(df_model['Shots_on_Goal_Home'], color='blue', label='Home', kde=True, bins=20)
sns.histplot(df_model['Shots_on_Goal_Host'], color='red', label='Host', kde=True, bins=20)
plt.title('Distribution of Shots on Goal')
plt.xlabel('Shots')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# Possession
plt.figure(figsize=(10, 5))
sns.histplot(df_model['Ball_Possession_Home'], color='green', label='Home', kde=True, bins=20)
sns.histplot(df_model['Ball_Possession_Host'], color='orange', label='Host', kde=True, bins=20)
plt.title('Ball Possession Distribution')
plt.xlabel('Possession (%)')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# Corners
plt.figure(figsize=(8, 5))
sns.boxplot(data=df_model[['Corner_Kicks_Home', 'Corner_Kicks_Host']])
plt.title('Boxplot of Corner Kicks')
plt.ylabel('Corners')
plt.xticks([0, 1], ['Home', 'Host'])
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.show()

# Target Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='SecondHalfControl', data=df_model, palette='pastel')
plt.title('Target: Who Controlled the Second Half')
plt.xticks([0, 1], ['Host Team', 'Home Team'])
plt.ylabel('Match Count')
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.show()

"""**Train the AI model**"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=20, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

"""**Evaluate the model**"""

# Visualize model performance metrics

precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)
print("Accuracy:", accuracy)

metrics = ['Accuracy', 'Precision', 'Recall', 'F1-score']
scores = [accuracy, precision, recall, f1]

plt.figure(figsize=(8, 5))
sns.barplot(x=metrics, y=scores, palette='Blues_d')
plt.ylim(0, 1.1)
plt.title('Model Performance Metrics')
plt.ylabel('Score')
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""**Interactive prediction demo**"""

def show_prediction(index):
    clear_output(wait=True)
    if index >= len(X):
        print("Index out of range!")
        return
    sample_input = X.iloc[[index]]
    sample_row = sample_input.iloc[0]
    prediction = model.predict(sample_input)[0]
    result = "✅ Home team will likely control the 2nd half" if prediction == 1 else "✅ Host team will likely control the 2nd half"
    print(f"Match #{index} - First Half Stats")
    display(sample_input)
    print("AI Prediction:", result)

    labels = ['Shots', 'Possession', 'Fouls', 'Corners', 'Score']
    home_values = [
        sample_row['Shots_on_Goal_Home'],
        sample_row['Ball_Possession_Home'],
        sample_row['Fouls_Home'],
        sample_row['Corner_Kicks_Home'],
        sample_row['home_score']
    ]
    host_values = [
        sample_row['Shots_on_Goal_Host'],
        sample_row['Ball_Possession_Host'],
        sample_row['Fouls_Host'],
        sample_row['Corner_Kicks_Host'],
        sample_row['away_score']
    ]

    x = range(len(labels))
    plt.figure(figsize=(10, 5))
    plt.bar(x, home_values, width=0.35, label='Home', align='center')
    plt.bar([p + 0.35 for p in x], host_values, width=0.35, label='Host', align='center')
    plt.xticks([p + 0.175 for p in x], labels)
    plt.title('First Half Comparison')
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

slider = widgets.IntSlider(value=0, min=0, max=len(X)-1, step=1, description='Match:')
widgets.interact(show_prediction, index=slider);